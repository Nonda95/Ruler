{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ruler \u00b6 Distance measurements library for Kotlin and Android. TLDR \u00b6 Define a distance and manipulate it. // Distance is dimensionless. val distanceFromMeters : Distance = Distance . ofMeters ( 100 ) val distanceFromYards : Distance = Distance . ofYards ( 50 ) // Length has a unit attached to it val metersLength : Length < SiLengthUnit . Meter > = distanceFromMeters . toLength ( SiLengthUnit . Meter ) val inchesLength : Length < ImperialLengthUnit . Inch > = distanceFromMeters . toLength ( ImperialLengthUnit . Inch ) // metersLength and inchesLength represent the same distance but with a different units attached to them check ( metersLength - inchesLength == Length . ofMeters ( 0 )) Android artifact allows to show a user formatted distances and lengths using appropriate Locale if available. fun main ( context : Context ) { val distance = Distance . ofMeters ( 100 ) val length = distance . toLength ( Meter ) // Assumes en_US Locale on a device. // Prints \"109yd 1ft 1in\" val humanReadableDistance : String = distance . format ( context ) // Prints \"109yd 1ft 1in\" val humanReadableLength : String = length . format ( context ) } Requirements \u00b6 Laboratory requires Java 8 bytecode support. You can enable it with the following configuration in a build.gradle file. android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = \"1.8\" } } Also, you have to enable default methods generation by Kotlin compiler. You can do this by adding a compiler flag in a build.gradle file. android { kotlinOptions { freeCompilerArgs += \"-Xjvm-default=enable\" } } Get Ruler \u00b6 Ruler is published to Maven Central Repository . repositories { mavenCentral () } dependencies { implementation \"io.mehow.ruler:ruler:0.6.0\" } Snapshots of the development version are available on Sonatype\u2019s snapshots repository . Here is the list of all available artifacts that Laboratory library provides. io.mehow.ruler:ruler:0.6.0 : Core of the library. Defines classes and interfaces that represent distances. io.mehow.ruler:ruler-android:0.6.0 : Provides distance formatters for Android platform that can present them to a user in a meaningful way. Attribution \u00b6 Logo icon made by Freepik from www.flaticon.com . License \u00b6 Copyright 2020 Micha\u0142 Sikora Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Quick start"},{"location":"#ruler","text":"Distance measurements library for Kotlin and Android.","title":"Ruler"},{"location":"#tldr","text":"Define a distance and manipulate it. // Distance is dimensionless. val distanceFromMeters : Distance = Distance . ofMeters ( 100 ) val distanceFromYards : Distance = Distance . ofYards ( 50 ) // Length has a unit attached to it val metersLength : Length < SiLengthUnit . Meter > = distanceFromMeters . toLength ( SiLengthUnit . Meter ) val inchesLength : Length < ImperialLengthUnit . Inch > = distanceFromMeters . toLength ( ImperialLengthUnit . Inch ) // metersLength and inchesLength represent the same distance but with a different units attached to them check ( metersLength - inchesLength == Length . ofMeters ( 0 )) Android artifact allows to show a user formatted distances and lengths using appropriate Locale if available. fun main ( context : Context ) { val distance = Distance . ofMeters ( 100 ) val length = distance . toLength ( Meter ) // Assumes en_US Locale on a device. // Prints \"109yd 1ft 1in\" val humanReadableDistance : String = distance . format ( context ) // Prints \"109yd 1ft 1in\" val humanReadableLength : String = length . format ( context ) }","title":"TLDR"},{"location":"#requirements","text":"Laboratory requires Java 8 bytecode support. You can enable it with the following configuration in a build.gradle file. android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = \"1.8\" } } Also, you have to enable default methods generation by Kotlin compiler. You can do this by adding a compiler flag in a build.gradle file. android { kotlinOptions { freeCompilerArgs += \"-Xjvm-default=enable\" } }","title":"Requirements"},{"location":"#get-ruler","text":"Ruler is published to Maven Central Repository . repositories { mavenCentral () } dependencies { implementation \"io.mehow.ruler:ruler:0.6.0\" } Snapshots of the development version are available on Sonatype\u2019s snapshots repository . Here is the list of all available artifacts that Laboratory library provides. io.mehow.ruler:ruler:0.6.0 : Core of the library. Defines classes and interfaces that represent distances. io.mehow.ruler:ruler-android:0.6.0 : Provides distance formatters for Android platform that can present them to a user in a meaningful way.","title":"Get Ruler"},{"location":"#attribution","text":"Logo icon made by Freepik from www.flaticon.com .","title":"Attribution"},{"location":"#license","text":"Copyright 2020 Micha\u0142 Sikora Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"api/","text":"API \u00b6 Coming soon!","title":"API"},{"location":"api/#api","text":"Coming soon!","title":"API"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this document. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 Changed \u00b6 Upgrade to Kotlin 1.4.20 0.6.0 - 2020-11-11 \u00b6 Added \u00b6 meterRatio property to LengthUnit interface. contains function to to LengthUnit interface. This allows to use in sugar syntax. Changed \u00b6 io.mehow.ruler:android to io.mehow.ruler:ruler-android artifact. Changelog format follows now Keep a Changelog format. Format is applied retroactively to this file. Length.measureLength property to measure . Distance.min , Distance.zero and Distance.max respectively to Distance.Min , Distance.Zero and Distance.Max . They are now available as fields from Java. ImperialDistanceFormatter.basic and ImperialDistanceFormatter.full to ImperialDistanceFormatter.Basic and ImperialDistanceFormatter.Full respectively. Upgrade to Kotlin 1.4.10 . Removed \u00b6 toDistance() methods from LengthUnit interface. -Xjvm-default=enable compiler argument is no longer required. toMeasuredLength() function from LengthUnit interface. appliesRangeTo() function from LengthUnit interface. 0.5.3 - 2020-06-14 \u00b6 Changed \u00b6 Upgrade to Kotlin 1.3.72 . Fixed \u00b6 Long to double conversion when computing distances. 0.5.2 - 2020-04-15 \u00b6 Added \u00b6 Arabic language support. Fixed \u00b6 Fix a bug with no inches displayed for 0 length. 0.5.1 - 2020-03-01 \u00b6 Removed \u00b6 Remove totalMeters property from Distance that approximates it. Fixed \u00b6 Fix wrong unit displayed for feet. 0.5.0 - 2020-02-29 \u00b6 Added \u00b6 Support for floored formatting of any length units. Allow to set globally if UK should use imperial or SI units. 0.4.1 - 2020-02-07 \u00b6 Added \u00b6 Support for negative distances. Support for floored SI unit lengths formatting. It displays only whole parts of a unit. 0.4.0 - 2020-02-05 \u00b6 Added \u00b6 Ruler class as a central point for distance and length formatting. Imperial unit formatter. It allows to display measurements in a imperial-friendly format. For example 105ft 12in . 0.3.2 2020-02-03 \u00b6 Fixed \u00b6 Fix issue with high precision Float and Double multiplication. 0.3.1 - 2020-02-03 \u00b6 Fixed \u00b6 Make library JDK 7 compatible. 0.3.0 - 2020-02-03 \u00b6 Added \u00b6 Add Distance (old Length ) formatter for Android. Add basic math operators like multiplication and division. Add Double factories to Distance (old Length ). Changed \u00b6 Swap names of Distance and Length classes. Use Long as an underlying Distance primitive. It is more suitable for application that have UI interaction and distance of ~975 light years seems sufficient for most day-to-day applications. 0.2.0 - 2020-02-03 \u00b6 Changed \u00b6 DistanceUnitCoercer changed to DistanceConverter . Distance constructor is no longer public. length in Distance is no longer public. meters and nanometers properties renamed respectively to metersPart and nanometersParts in Length class. 0.1.0 - 2020-02-02 \u00b6 Initial release.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this document. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#changed","text":"Upgrade to Kotlin 1.4.20","title":"Changed"},{"location":"changelog/#060-2020-11-11","text":"","title":"0.6.0 - 2020-11-11"},{"location":"changelog/#added","text":"meterRatio property to LengthUnit interface. contains function to to LengthUnit interface. This allows to use in sugar syntax.","title":"Added"},{"location":"changelog/#changed_1","text":"io.mehow.ruler:android to io.mehow.ruler:ruler-android artifact. Changelog format follows now Keep a Changelog format. Format is applied retroactively to this file. Length.measureLength property to measure . Distance.min , Distance.zero and Distance.max respectively to Distance.Min , Distance.Zero and Distance.Max . They are now available as fields from Java. ImperialDistanceFormatter.basic and ImperialDistanceFormatter.full to ImperialDistanceFormatter.Basic and ImperialDistanceFormatter.Full respectively. Upgrade to Kotlin 1.4.10 .","title":"Changed"},{"location":"changelog/#removed","text":"toDistance() methods from LengthUnit interface. -Xjvm-default=enable compiler argument is no longer required. toMeasuredLength() function from LengthUnit interface. appliesRangeTo() function from LengthUnit interface.","title":"Removed"},{"location":"changelog/#053-2020-06-14","text":"","title":"0.5.3 - 2020-06-14"},{"location":"changelog/#changed_2","text":"Upgrade to Kotlin 1.3.72 .","title":"Changed"},{"location":"changelog/#fixed","text":"Long to double conversion when computing distances.","title":"Fixed"},{"location":"changelog/#052-2020-04-15","text":"","title":"0.5.2 - 2020-04-15"},{"location":"changelog/#added_1","text":"Arabic language support.","title":"Added"},{"location":"changelog/#fixed_1","text":"Fix a bug with no inches displayed for 0 length.","title":"Fixed"},{"location":"changelog/#051-2020-03-01","text":"","title":"0.5.1 - 2020-03-01"},{"location":"changelog/#removed_1","text":"Remove totalMeters property from Distance that approximates it.","title":"Removed"},{"location":"changelog/#fixed_2","text":"Fix wrong unit displayed for feet.","title":"Fixed"},{"location":"changelog/#050-2020-02-29","text":"","title":"0.5.0 - 2020-02-29"},{"location":"changelog/#added_2","text":"Support for floored formatting of any length units. Allow to set globally if UK should use imperial or SI units.","title":"Added"},{"location":"changelog/#041-2020-02-07","text":"","title":"0.4.1 - 2020-02-07"},{"location":"changelog/#added_3","text":"Support for negative distances. Support for floored SI unit lengths formatting. It displays only whole parts of a unit.","title":"Added"},{"location":"changelog/#040-2020-02-05","text":"","title":"0.4.0 - 2020-02-05"},{"location":"changelog/#added_4","text":"Ruler class as a central point for distance and length formatting. Imperial unit formatter. It allows to display measurements in a imperial-friendly format. For example 105ft 12in .","title":"Added"},{"location":"changelog/#032-2020-02-03","text":"","title":"0.3.2 2020-02-03"},{"location":"changelog/#fixed_3","text":"Fix issue with high precision Float and Double multiplication.","title":"Fixed"},{"location":"changelog/#031-2020-02-03","text":"","title":"0.3.1 - 2020-02-03"},{"location":"changelog/#fixed_4","text":"Make library JDK 7 compatible.","title":"Fixed"},{"location":"changelog/#030-2020-02-03","text":"","title":"0.3.0 - 2020-02-03"},{"location":"changelog/#added_5","text":"Add Distance (old Length ) formatter for Android. Add basic math operators like multiplication and division. Add Double factories to Distance (old Length ).","title":"Added"},{"location":"changelog/#changed_3","text":"Swap names of Distance and Length classes. Use Long as an underlying Distance primitive. It is more suitable for application that have UI interaction and distance of ~975 light years seems sufficient for most day-to-day applications.","title":"Changed"},{"location":"changelog/#020-2020-02-03","text":"","title":"0.2.0 - 2020-02-03"},{"location":"changelog/#changed_4","text":"DistanceUnitCoercer changed to DistanceConverter . Distance constructor is no longer public. length in Distance is no longer public. meters and nanometers properties renamed respectively to metersPart and nanometersParts in Length class.","title":"Changed"},{"location":"changelog/#010-2020-02-02","text":"Initial release.","title":"0.1.0 - 2020-02-02"},{"location":"releasing/","text":"Releasing \u00b6 Versioning \u00b6 Run the prepare release script and bump the desirable version part. If there are no errors git push && git push --tags . Wait for the CI server to upload the artifacts. Visit Sonatype Nexus and promote the artifacts. Documentation updates \u00b6 Website documentation lives under /docs directory and is deployed with MkDocs using Material Theme . A new site is built and published for latest commits on the master branch. If you want to test the website locally before pushing changes you need to follow these steps. Make sure you have Python 3 and pip installed. $ python --version Python 3 .8.5 $ pip --version pip 20 .2.4 Install MkDocs and Material Theme. $ pip install mkdocs mkdocs-material $ mkdocs --version mkdocs, version 1 .1.2 Run the site locally. $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0 .73 seconds [ I 201026 22 :51:56 server:335 ] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#versioning","text":"Run the prepare release script and bump the desirable version part. If there are no errors git push && git push --tags . Wait for the CI server to upload the artifacts. Visit Sonatype Nexus and promote the artifacts.","title":"Versioning"},{"location":"releasing/#documentation-updates","text":"Website documentation lives under /docs directory and is deployed with MkDocs using Material Theme . A new site is built and published for latest commits on the master branch. If you want to test the website locally before pushing changes you need to follow these steps. Make sure you have Python 3 and pip installed. $ python --version Python 3 .8.5 $ pip --version pip 20 .2.4 Install MkDocs and Material Theme. $ pip install mkdocs mkdocs-material $ mkdocs --version mkdocs, version 1 .1.2 Run the site locally. $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0 .73 seconds [ I 201026 22 :51:56 server:335 ] Serving on http://127.0.0.1:8000 INFO - Serving on http://127.0.0.1:8000","title":"Documentation updates"},{"location":"user-guide/","text":"User guide \u00b6 Coming soon!","title":"User guide"},{"location":"user-guide/#user-guide","text":"Coming soon!","title":"User guide"}]}